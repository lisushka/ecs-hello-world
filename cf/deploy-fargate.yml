AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  ClusterName:
    Type: String
    Default: go-fargate-cluster
  ServiceName:
    Type: String
    Default: go-webapp-service
  ImageUrl:
    Type: String
    Default: nginx:latest
  ContainerPort:
    Type: Number
    Default: 80
  ContainerCpu:
    Type: Number
    Default: 256
  ContainerMemory:
    Type: Number
    Default: 512
  Path:
    Type: String
    Default: "*"
  Priority:
    Type: Number
    Default: 1
  DesiredCount:
    Type: Number
    Default: 2
    Description: The number of copies of the service task to run as a baseline
  MinimumCount:
    Type: Number
    Default: 2
    Description: The minimum number of copies of the service task to run
  MaximumCount:
    Type: Number
    Default: 15
    Description: The maximum number of copies of the service task to run
  CPUScalingRuleTarget:
    Type: Number
    Default: 70.0
    Description: The CPU usage limit at which the service will scale up

Resources:
  # VPC used by Fargate cluster
  FargateVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
  # Internet gateway used by Fargate cluster
  FargateIGW:
    Type: AWS::EC2::InternetGateway
  FargateIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: FargateVPC
      InternetGatewayId:
        Ref: FargateIGW
  # Route table to handle traffic between subnets
  FargateVPCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: FargateVPC
  FargateVPCRoute:
    Type: AWS::EC2::Route
    # make sure the gateway is attached to the VPC first
    DependsOn: FargateIGWAttachment
    Properties:
       RouteTableId:
         Ref: FargateVPCRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
         Ref: FargateIGW
  # Two subnets, each using different availability zones
  # Any new subnets should use a different availability zone
  # (change the number in the Fn::Select function)
  FargateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Ref: FargateVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      MapPublicIpOnLaunch: true
  FargateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: FargateVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      MapPublicIpOnLaunch: true
  # Attach the subnets to the route table
  SubnetAToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: FargateSubnetA
      RouteTableId: 
        Ref: FargateVPCRouteTable
  SubnetBToRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: FargateSubnetB
      RouteTableId: 
        Ref: FargateVPCRouteTable
  # ECS cluster for Fargate tasks
  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName:
        Ref: ClusterName
  # Load balancer to handle public traffic
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref FargateSubnetA
        - !Ref FargateSubnetB
      SecurityGroups: [!Ref ALBSecurityGroup]
  # Security group and ingress rules used by Fargate cluster
  FargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow public traffic to Fargate containers
      VpcId:
        Ref: FargateVPC
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow public traffic through the load balancer
      VpcId:
        Ref: FargateVPC
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
  LoadBalancerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: FargateSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId:
        Ref: ALBSecurityGroup
  SGSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: FargateSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId:
        Ref: FargateSecurityGroup
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name:
            Ref: ServiceName
          Image:
            Ref: ImageUrl
          Cpu:
            Ref: ContainerCpu
          Memory:
            Ref: ContainerMemory
          PortMappings:
            - ContainerPort:
                Ref: ContainerPort
      Family:
        Ref: ServiceName
      Cpu:
        Ref: ContainerCpu
      Memory:
        Ref: ContainerMemory
      NetworkMode: awsvpc
      ExecutionRoleArn:
        Ref: ECSTaskExecutionRole
  FargateService:
    Type: AWS::ECS::Service
    DependsOn: ALBRule
    Properties:
      ServiceName:
        Ref: ServiceName
      Cluster:
        Ref: FargateCluster
      LaunchType: FARGATE
      DesiredCount:
        Ref: DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [!Ref FargateSecurityGroup]
          Subnets:
            - !Ref FargateSubnetA
            - !Ref FargateSubnetB
      TaskDefinition:
        Ref: TaskDefinition
      LoadBalancers:
        - ContainerName:
            Ref: ServiceName
          ContainerPort:
            Ref: ContainerPort
          TargetGroupArn:
            Ref: TargetGroup
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity:
        Ref: MinimumCount
      MaxCapacity:
        Ref: MaximumCount
      RoleARN: 
        Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      ResourceId:
        Fn::Sub: 'service/${ClusterName}/${ServiceName}'
  TargetTrackingScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: cpu70-target-tracking-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue:
          Ref: CPUScalingRuleTarget
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name:
        Ref: ServiceName
      Port:
        Ref: ContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Ref: FargateVPC
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: PublicLoadBalancer
      Port:
        Ref: ContainerPort
      Protocol: HTTP
  ALBRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn:
            Ref: TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values: [!Ref Path]
      ListenerArn:
        Ref: ALBListener
      Priority:
        Ref: Priority

  # IAM role to manage Fargate and load balancing
  ECSManagementRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - ec2:*
              - elasticloadbalancing:*
            Resource: '*'

  # IAM role to allow CloudWatch logging
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - logs:*
              Resource: '*'